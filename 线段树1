#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#define inf 0x3f3f3f3f
using namespace std;
typedef long long ll;
#define N 10005
int arr[N<<2];
int rt[N<<2];
void build(int L,int R,int arr[],int rt[],int k)
{
    if(L==R)
    {
        rt[k]=arr[L];
        return ;
    }
    else
    {   int mid=(L+R)/2;
        build(L,mid,arr,rt,k*2);
        build(mid+1,R,arr,rt,k*2+1);
        rt[k]=rt[k*2]+rt[k*2+1];
    }
}
void update(int arr[],int rt[],int l,int r,int index,int val,int k)
{
    if(l==r)
    {
        arr[index]=val;
        rt[k]=val;
    }
    else
    {
        int mid=(l+r)/2;
        if(l<=index&&index<=mid)
        {
            update(arr,rt,l,mid,index,val,k*2);
        }
        else
        {
            update(arr,rt,mid+1,r,index,val,k*2+1);
        }
        rt[k]=rt[k*2]+rt[k*2+1];
    }

}
int query(int arr[],int rt[],int l,int r,int k,int L,int R)
{
    printf("start = %d\n",l);
    printf("end = %d\n",r);
    printf("\n");
    if(L>r||R<l)
    {
        return 0;
    }
    else if(L<=l&&r<=R)
    {
            return rt[k];
    }
    else if(l==r)
    {
        return rt[k];
    }
    else
    {
        int mid=(l+r)/2;
        int lefsum=query(arr,rt,l,mid,k*2,L,R);
        int rightsum =query(arr,rt,mid+1,r,k*2+1,L,R);
        return lefsum+rightsum;
    }
}
int main()
{
    memset(rt,0,sizeof(rt));
    int n;
    n=6;
    arr[1]=1;
    arr[2]=2;
    arr[3]=3;
    arr[4]=4;
    arr[5]=5;
    arr[6]=6;
    build(1,n,arr,rt,1);
//    for(int i=1;i<=n*2+3;i++)
//    {
//        cout<<i<<"  "<<rt[i]<<endl;
//    }



//      for(int i=1;i<=n*2+3;i++)
//    {
//        cout<<i<<"  "<<rt[i]<<endl;
//    }

    cout<<query(arr,rt,1,6,1,3,5)<<endl;

    return 0;
}
